#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/39299866-a476-4f88-af46-a869f2ada29e 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  CloudTemperatureSensor temperature;
  int fanspeed;
  CloudRelativeHumidity humidity;
  bool fire;
  bool supression;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <DHT.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>

// Pin Definitions
#define DHTPIN A0     // Analog pin connected to the DHT sensor
#define DHTTYPE DHT11 // DHT 11
#define ENA 8         // Motor speed control pin
#define IN1 9         // Motor direction control pin
#define IN2 10        // Motor direction control pin
#define RELAY1 4      // Relay for controlling the fan
#define RELAY2 5      // Relay for controlling the water pump
#define BUZZER 6      // Buzzer pin
#define FLAMESENSOR 2 // Flame sensor pin

// Temperature thresholds
const int minTemp = 25; // Minimum temperature in Celsius
const int maxTemp = 35; // Maximum temperature in Celsius

// DHT and LCD initialization
DHT dht(DHTPIN, DHTTYPE);
LiquidCrystal_I2C lcd(0x27, 16, 2);

void setup() {
  // Initialize serial communication
  Serial.begin(9600);
  Serial.println("Starting IoT Cloud sketch...");

  // Initialize DHT sensor
  dht.begin();

  // Initialize LCD
  lcd.init();
  lcd.backlight();

  // Initialize motor pins as outputs
  pinMode(ENA, OUTPUT);
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);

  // Initialize relay pins as outputs
  pinMode(RELAY1, OUTPUT);
  pinMode(RELAY2, OUTPUT);

  // Initialize buzzer and flame sensor
  pinMode(BUZZER, OUTPUT);
  pinMode(FLAMESENSOR, INPUT);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  // Set debug message level
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();

  // Read temperature and humidity every second
  float h = dht.readHumidity();
  float t = dht.readTemperature();

  if (isnan(h) || isnan(t)) {
    Serial.println("Failed to read from DHT sensor!");
    return;
  }

  // Update Cloud variables
  temperature = t;
  humidity = h;

  // Calculate fan speed based on temperature
  int fanSpeed = 0;
  if (t <= minTemp) {
    fanSpeed = 0;
    fanspeed = 0;
  } else if (t >= maxTemp) {
    fanSpeed = 255;
    fanspeed = 100;
  } else {
    // Linear interpolation between minTemp and maxTemp
    fanSpeed = map(t, minTemp, maxTemp, 0, 255);
    fanspeed = map(t, minTemp, maxTemp, 0, 100);
  }

  // Display on LCD
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Fn:");
  lcd.print(fanSpeed > 0 ? "ON " : "OFF");

  lcd.setCursor(7, 0);
  lcd.print("Fns:");
  lcd.print(fanspeed);
  lcd.print("%");

  lcd.setCursor(0, 1);
  lcd.print("Hd: ");
  lcd.print((int)h);
  lcd.print("%");

  lcd.setCursor(9, 1);
  lcd.print("Tp:");
  lcd.print((int)t);
  lcd.print((char)223); // Degree symbol
  lcd.print("C");

  // Check flame sensor
  bool flameDetected = digitalRead(FLAMESENSOR) == LOW;
  fire = flameDetected;

  if (flameDetected) {
    analogWrite(BUZZER, 50);
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Flame detected!");
    lcd.setCursor(0, 1);
    lcd.print("Fan: OFF");

    // Turn off fan
    digitalWrite(RELAY1, LOW);
    digitalWrite(IN1, LOW);
    digitalWrite(IN2, LOW);
    analogWrite(ENA, 0);

    // Turn on water pump
    digitalWrite(RELAY2, HIGH);
    supression = true;
  } else {
    analogWrite(BUZZER, 0);
    digitalWrite(RELAY2, LOW);
    supression = false;

    if (fanSpeed > 0) {
      digitalWrite(RELAY1, HIGH);
      digitalWrite(IN1, HIGH);
      digitalWrite(IN2, LOW);
      analogWrite(ENA, fanSpeed);
    } else {
      digitalWrite(RELAY1, LOW);
      digitalWrite(IN1, LOW);
      digitalWrite(IN2, LOW);
      analogWrite(ENA, 0);
    }
  }

  delay(1000); // Wait for a second before next loop
}

// Cloud variable change handlers
void onTemperatureChange() {
  // Add your code here to act upon Temperature change from IoT Cloud
}

void onHumidityChange() {
  // Add your code here to act upon Humidity change from IoT Cloud
}

void onFanspeedChange() {
  // Add your code here to act upon Fanspeed change from IoT Cloud
  int fanSpeedValue = fanspeed; // Get the updated fanspeed value from IoT Cloud
  // Example action based on fanspeed change
  Serial.print("New fan speed value received: ");
  Serial.println(fanSpeedValue);
}

void onFireChange() {
  // Add your code here to act upon Fire change from IoT Cloud
  bool fireDetectedValue = fire; // Get the updated fire status from IoT Cloud
  if (fireDetectedValue) {
    Serial.println("Fire detected! Taking necessary actions...");
    // Example action: activate alarm, send notification, etc.
  } else {
    Serial.println("Fire not detected.");
    // Example action: deactivate alarm, reset systems, etc.
  }
}

void onSupressionChange() {
  // Add your code here to act upon Supression change from IoT Cloud
  bool suppressionValue = supression; // Get the updated suppression status from IoT Cloud
  if (suppressionValue) {
    Serial.println("Suppression activated! Water pump is ON.");
    // Example action: activate water pump, initiate suppression process, etc.
  } else {
    Serial.println("Suppression deactivated. Water pump is OFF.");
    // Example action: deactivate water pump, stop suppression process, etc.
  }
}
